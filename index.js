import { initializeApp } from "https://www.gstatic.com/firebasejs/11.5.0/firebase-app.js";
import { 
    getFirestore, collection, getDocs, setDoc, doc, onSnapshot, deleteDoc 
} from "https://www.gstatic.com/firebasejs/11.5.0/firebase-firestore.js";

// C·∫•u h√¨nh Firebase
const firebaseConfig = {
    apiKey: "AIzaSyCg1SRJ...",
    authDomain: "quanlinhahang.firebaseapp.com",
    projectId: "quanlinhahang",
    storageBucket: "quanlinhahang.appspot.com",
    messagingSenderId: "334232846720",
    appId: "1:334232846720:web:122dc4ff290d563b078165",
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
window.firebaseDB = db;

// L·∫•y ID m√≥n ƒÉn ti·∫øp theo
async function getNextFoodId() {
    const foodsCollection = collection(db, "foods");
    const snapshot = await getDocs(foodsCollection);
    
    let ids = snapshot.docs.map(doc => parseInt(doc.id, 10)).filter(id => !isNaN(id));
    ids.sort((a, b) => a - b);

    let nextId = 1;
    for (let id of ids) {
        if (id !== nextId) break;
        nextId++;
    }

    return nextId.toString();
}

// Th√™m m√≥n ƒÉn m·ªõi v√†o Firebase v√† IndexedDB
async function addFood(name, price) {
    try {
        if (!name || !price) throw new Error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin m√≥n ƒÉn!");
        const newId = await getNextFoodId();
        await setDoc(doc(db, "foods", newId), { 
            name: name.trim(),
            price: parseFloat(price)
        });
        console.log(`‚úÖ ƒê√£ th√™m: ${name} - ${price} VND`);
        displayFoods();  // Hi·ªÉn th·ªã l·∫°i danh s√°ch m√≥n ƒÉn
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m m√≥n ƒÉn:", error);
    }
}

// S·ª≠a m√≥n ƒÉn trong Firebase v√† IndexedDB
async function updateFood(foodId, newName, newPrice) {
    try {
        if (!foodId || !newName || !newPrice) throw new Error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");

        const foodRef = doc(db, "foods", foodId);
        await setDoc(foodRef, {
            name: newName.trim(),
            price: parseFloat(newPrice)
        }, { merge: true });

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√≥n ƒÉn v·ªõi ID ${foodId} trong Firebase`);

        // C·∫≠p nh·∫≠t IndexedDB
        const db = await openIndexedDB();
        const transaction = db.transaction(["foods"], "readwrite");
        const store = transaction.objectStore("foods");
        store.put({ id: parseInt(foodId, 10), name: newName.trim(), price: parseFloat(newPrice) });

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√≥n ƒÉn v·ªõi ID ${foodId} trong IndexedDB!`);
        displayFoods();  // Hi·ªÉn th·ªã l·∫°i danh s√°ch
    } catch (error) {
        console.error("‚ùå L·ªói khi s·ª≠a m√≥n ƒÉn:", error);
    }
}


// X√≥a m√≥n ƒÉn kh·ªèi Firebase v√† IndexedDB
async function deleteFood(foodId) {
    try {
        if (!foodId) throw new Error("‚ö†Ô∏è Vui l√≤ng cung c·∫•p ID m√≥n ƒÉn ƒë·ªÉ x√≥a!");

        // X√≥a m√≥n ƒÉn kh·ªèi Firebase
        await deleteDoc(doc(db, "foods", foodId));
        console.log(`‚úÖ ƒê√£ x√≥a m√≥n ƒÉn ID ${foodId} kh·ªèi Firebase!`);

        // X√≥a m√≥n ƒÉn kh·ªèi IndexedDB
        const db = await openIndexedDB();
        const transaction = db.transaction(["foods"], "readwrite");
        const store = transaction.objectStore("foods");
        store.delete(parseInt(foodId, 10));

        console.log(`‚úÖ ƒê√£ x√≥a m√≥n ƒÉn ID ${foodId} kh·ªèi IndexedDB!`);
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a m√≥n ƒÉn:", error);
    }
}

// Hi·ªÉn th·ªã danh s√°ch m√≥n ƒÉn
async function displayFoods() {
    try {
        console.log("üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ IndexedDB...");
        let foodsData = await getFoodsFromIndexedDB(); // L·∫•y d·ªØ li·ªáu t·ª´ IndexedDB
        console.log("üì• D·ªØ li·ªáu t·ª´ IndexedDB:", foodsData);

        if (foodsData.length === 0) {
            console.log("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong IndexedDB!");
        } else {
            console.log("üìä D·ªØ li·ªáu hi·ªÉn th·ªã:", foodsData);
            // Hi·ªÉn th·ªã d·ªØ li·ªáu (l√†m theo nhu c·∫ßu c·ªßa b·∫°n)
            const foodsList = document.getElementById("foodsList");
            foodsList.innerHTML = foodsData.map(food => 
                `<li>${food.name} - ${food.price} VND
                    <button onclick="editFood(${food.id})">S·ª≠a</button>
                    <button onclick="confirmDeleteFood(${food.id})">X√≥a</button>
                </li>`
            ).join('');
            
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi hi·ªÉn th·ªã d·ªØ li·ªáu:", error);
    }
}

// C√°c h√†m th√™m, s·ª≠a v√† x√≥a m√≥n ƒÉn t·ª´ giao di·ªán ng∆∞·ªùi d√πng
document.getElementById("addFoodBtn").addEventListener("click", () => {
    const name = document.getElementById("foodName").value;
    const price = document.getElementById("foodPrice").value;
    addFood(name, price);  // G·ªçi h√†m th√™m m√≥n ƒÉn
});

async function editFood(foodId) {
    const name = prompt("Nh·∫≠p t√™n m√≥n ƒÉn m·ªõi:");
    const price = prompt("Nh·∫≠p gi√° m√≥n ƒÉn m·ªõi:");
    await updateFood(foodId, name, price);  // G·ªçi h√†m s·ª≠a m√≥n ƒÉn
}

async function confirmDeleteFood(foodId) {
    const confirmation = confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m√≥n ƒÉn n√†y?");
    if (confirmation) {
        await deleteFood(foodId);  // G·ªçi ƒë√∫ng h√†m x√≥a
    }
}


// M·ªü v√† ƒë·ªìng b·ªô IndexedDB
let indexedDBInstance = null;

function openIndexedDB() {
    return new Promise((resolve, reject) => {
        if (indexedDBInstance) return resolve(indexedDBInstance);
        let request = indexedDB.open("FoodDB", 2);

        request.onupgradeneeded = function (event) {
            let db = event.target.result;
            if (!db.objectStoreNames.contains("foods")) {
                db.createObjectStore("foods", { keyPath: "id" });
                console.log("‚úÖ Object store 'foods' ƒë√£ ƒë∆∞·ª£c t·∫°o!");
            }
        };

        request.onsuccess = async function (event) {
            indexedDBInstance = event.target.result;
            console.log("‚úÖ IndexedDB ƒë√£ m·ªü th√†nh c√¥ng!");
            resolve(indexedDBInstance);
            await syncFirebaseToIndexedDB();
        };

        request.onerror = () => reject("‚ùå L·ªói m·ªü IndexedDB!");
    });
}

async function updateIndexedDB(firebaseData) {
    const db = await openIndexedDB();
    let transaction = db.transaction(["foods"], "readwrite");
    let store = transaction.objectStore("foods");
    await Promise.all(firebaseData.map(food => store.put(food)));
    console.log("‚úÖ IndexedDB ƒë√£ c·∫≠p nh·∫≠t xong!");
}

function syncFirebaseToIndexedDB() {
    const foodsCollection = collection(db, "foods");
    onSnapshot(foodsCollection, async (snapshot) => {
        try {
            let firebaseData = snapshot.docs.map(doc => ({ id: parseInt(doc.id, 10), ...doc.data() }));
            console.log("üì• Firebase c·∫≠p nh·∫≠t:", firebaseData);
            await updateIndexedDB(firebaseData);
        } catch (error) {
            console.error("‚ùå L·ªói ƒë·ªìng b·ªô Firebase ‚Üí IndexedDB:", error);
        }
    });
}

openIndexedDB();
